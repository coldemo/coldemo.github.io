{"version":3,"sources":["hooks/useApi.ts","gallery/util.ts","gallery/Gallery.tsx"],"names":["defaultParseData","response","data","useApi","method","urlPattern","parseData","useState","setResponse","loading","setLoading","error","setError","request","useCallback","a","patch","pathParams","Object","create","trueUrl","replace","$0","$1","Axios","url","getData","handleImageError","e","el","currentTarget","parent","parentNode","removeChild","Gallery","history","useHistory","resp","split","filter","Boolean","map","v","reqIndex","loadingIndex","getIndex","useEffect","className","spinning","gutter","xs","sm","id","key","hoverable","cover","alt","src","onError","onClick","metaKey","window","open","push","Meta","title"],"mappings":"4NA0BIA,EAAmB,SAACC,GACtB,OAAOA,EAAWA,EAASC,KAAO,MAGzBC,EAAS,SAClBC,EACAC,GAFkB,IAGlBC,EAHkB,uDAGqCN,EAHrC,kBAII,IAAD,EACSO,mBAAkC,MAD3C,mBAChBN,EADgB,KACNO,EADM,OAEOD,oBAAS,GAFhB,mBAEhBE,EAFgB,KAEPC,EAFO,OAGGH,mBAAS,MAHZ,mBAGhBI,EAHgB,KAGTC,EAHS,KAKjBC,EAAmBC,sBAAW,sBAChC,8CAAAC,EAAA,6DAAOC,EAAP,+BAAe,GACTC,EAAyBD,EAAMC,YAAcC,OAAOC,OAAO,MAE3DC,EAAUf,EAAWgB,QAAQ,2BAA2B,SAACC,EAAIC,GAC/D,MAAM,IAAN,OAAWN,EAAWM,OAJ1B,SAQIb,GAAW,GARf,SASyBc,IAAM,aACzBpB,SACAqB,IAAKL,GACFJ,IAZT,OASQf,EATR,OAcIO,EAAYP,GACZW,EAAS,MAfb,kDAiBIJ,EAAY,MACZI,EAAS,EAAD,IAlBZ,yBAoBIF,GAAW,GApBf,6EAuBA,CAACN,EAAQI,EAAaH,IAGpBqB,EAAUZ,uBAAY,WACxB,OAAOR,EAAUL,KAChB,CAACK,EAAWL,IAEf,MAAO,CAAEY,UAASF,QAAOV,WAAUyB,UAASjB,WAxC1B,K,6KC9BTkB,G,OAAmB,SAC5BC,GAEA,IAAIC,EAAKD,EAAEE,cACPC,EAASF,EAAGG,WACZD,GAAQA,EAAOE,YAAYJ,K,kBCGtBK,EAAoB,WAC7B,IAAIC,EAAUC,cADqB,EAGmCjC,YAGpE,MAAO,kBAAkB,SAAAkC,GACzB,OAAKA,EACKA,EAAKnC,KAEZoC,MAAM,MACNC,OAAOC,SACPC,KAAI,SAAAC,GAAC,OAAIA,EAAErB,QAAQ,QAAS,OALb,MAJLsB,EAHoB,EAG7B9B,QAA4B+B,EAHC,EAGVnC,QAAgCoC,EAHtB,EAGanB,QAkBhD,OALAoB,qBAAU,WACRH,MAEC,IAGD,yBAAKI,UAAU,gBACb,kBAAC,IAAD,KACE,2CAEF,kBAAC,IAAD,CAAMC,SAAUJ,GACd,yBAAKG,UAAU,kBACb,kBAAC,IAAD,CACEE,OAAQ,CACN,CAAEC,GAAI,GAAIC,GAAI,IACd,CAAED,GAAI,GAAIC,GAAI,MAGfN,IAAWJ,KAAI,SAAAW,GACd,OACE,kBAAC,IAAD,CAAKC,IAAKD,EAAIF,GAAI,GAAIC,GAAI,IACxB,kBAAC,IAAD,CACEG,WAAS,EACTC,MACE,yBACEC,IAAI,GACJC,IAAG,eAAUL,EAAV,QACHM,QAAS/B,IAGbgC,QAAS,SAAA/B,GACHA,EAAEgC,QACJC,OAAOC,KAAP,wBAA6BV,IAE7BjB,EAAQ4B,KAAR,sBAA4BX,MAIhC,kBAAC,IAAKY,KAAN,CACEC,MAAOb","file":"static/js/6.95e43c8f.chunk.js","sourcesContent":["import Axios, { AxiosRequestConfig, AxiosResponse } from 'axios';\nimport { useCallback, useState } from 'react';\n\ninterface PathParams {\n  [key: string]: string;\n}\n\ntype Request = (\n  patch?: Partial<\n    AxiosRequestConfig & {\n      pathParams?: PathParams;\n    }\n  >\n) => Promise<void>;\n\nexport interface UseApiObj<T = any, DT = T | null> {\n  request: Request;\n  error: Error | null;\n  response: AxiosResponse<T> | null;\n  getData: () => DT;\n  loading: boolean;\n}\n\n// @todo useMemo config / default\n// @todo loading, error\n\nlet defaultParseData = (response: AxiosResponse | null) => {\n  return response ? response.data : null;\n};\n\nexport let useApi = <T = any, DT = T>(\n  method: AxiosRequestConfig['method'],\n  urlPattern: string,\n  parseData: (response: AxiosResponse<T> | null) => DT = defaultParseData\n): UseApiObj<T, DT> => {\n  let [response, setResponse] = useState<AxiosResponse<T> | null>(null);\n  let [loading, setLoading] = useState(false);\n  let [error, setError] = useState(null);\n\n  let request: Request = useCallback(\n    async (patch = {}) => {\n      let pathParams: PathParams = patch.pathParams || Object.create(null);\n\n      let trueUrl = urlPattern.replace(/\\/:([^/?#&\\d][^/?#&]*)/g, ($0, $1) => {\n        return `/${pathParams[$1]}`;\n      });\n\n      try {\n        setLoading(true);\n        let response = await Axios({\n          method,\n          url: trueUrl,\n          ...patch,\n        });\n        setResponse(response);\n        setError(null);\n      } catch (err) {\n        setResponse(null);\n        setError(err);\n      } finally {\n        setLoading(false);\n      }\n    },\n    [method, setResponse, urlPattern]\n  );\n\n  let getData = useCallback(() => {\n    return parseData(response);\n  }, [parseData, response]);\n\n  return { request, error, response, getData, loading };\n};\n","export let handleImageError = (\n  e: React.SyntheticEvent<HTMLImageElement, Event>\n) => {\n  let el = e.currentTarget;\n  let parent = el.parentNode;\n  if (parent) parent.removeChild(el);\n};\n","import { Card, Col, Row, Spin } from 'antd';\nimport React, { useEffect } from 'react';\nimport { useHistory } from 'react-router';\nimport { useApi } from '../hooks/useApi';\nimport './page.css';\nimport { handleImageError } from './util';\nimport Helmet from 'react-helmet';\n\nexport let Gallery: React.FC = () => {\n  let history = useHistory();\n\n  let { request: reqIndex, loading: loadingIndex, getData: getIndex } = useApi<\n    string,\n    string[]\n  >('GET', 'code/index.yml', resp => {\n    if (!resp) return [];\n    let txt = resp.data;\n    let list = txt\n      .split(/\\n/)\n      .filter(Boolean)\n      .map(v => v.replace(/^-\\s*/, ''));\n    return list;\n  });\n\n  useEffect(() => {\n    reqIndex();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <div className=\"page-gallery\">\n      <Helmet>\n        <title>Gallery</title>\n      </Helmet>\n      <Spin spinning={loadingIndex}>\n        <div className=\"main-container\">\n          <Row\n            gutter={[\n              { xs: 12, sm: 16 },\n              { xs: 12, sm: 16 },\n            ]}\n          >\n            {getIndex().map(id => {\n              return (\n                <Col key={id} xs={12} sm={12}>\n                  <Card\n                    hoverable\n                    cover={\n                      <img\n                        alt=\"\"\n                        src={`code/${id}.png`}\n                        onError={handleImageError}\n                      />\n                    }\n                    onClick={e => {\n                      if (e.metaKey) {\n                        window.open(`/#/playground/${id}`);\n                      } else {\n                        history.push(`/playground/${id}`);\n                      }\n                    }}\n                  >\n                    <Card.Meta\n                      title={id}\n                      // description=\"www.instagram.com\"\n                    />\n                  </Card>\n                </Col>\n              );\n            })}\n          </Row>\n        </div>\n      </Spin>\n    </div>\n  );\n};\n"],"sourceRoot":""}